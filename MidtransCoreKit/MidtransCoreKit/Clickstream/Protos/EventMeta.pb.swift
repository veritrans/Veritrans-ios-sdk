// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: midtrans/clickstream/meta/EventMeta.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///platform="ios,android"

import Foundation
import SwiftProtobuf

///
/// Corresponds to the event meta sent as part of an event. EventMeta defines properties which are part of all events by default.
public class Midtrans_Clickstream_Meta_EventMeta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Event GUID. This is used to uniquely identify any event in clickstream.
  /// Sample values: "9b4dcb7d-9f69-42de-927e-cf7af1dd24fa".
  public var eventGuid: String {
    get {return _storage._eventGuid}
    set {_uniqueStorage()._eventGuid = newValue}
  }

  ///
  /// Merchant Info. This is used to capture details of the merchant.
  public var merchant: Midtrans_Clickstream_Meta_Merchant {
    get {return _storage._merchant ?? Midtrans_Clickstream_Meta_Merchant()}
    set {_uniqueStorage()._merchant = newValue}
  }

  ///
  /// App Info.
  public var app: Midtrans_Clickstream_Meta_App {
    get {return _storage._app ?? Midtrans_Clickstream_Meta_App()}
    set {_uniqueStorage()._app = newValue}
  }

  ///
  /// Device Info.
  public var device: Midtrans_Clickstream_Meta_Device {
    get {return _storage._device ?? Midtrans_Clickstream_Meta_Device()}
    set {_uniqueStorage()._device = newValue}
  }

  public var snapToken: String {
    get {return _storage._snapToken}
    set {_uniqueStorage()._snapToken = newValue}
  }

  public var orderID: String {
    get {return _storage._orderID}
    set {_uniqueStorage()._orderID = newValue}
  }

  public var sessionID: String {
    get {return _storage._sessionID}
    set {_uniqueStorage()._sessionID = newValue}
  }

  public var transaction: Midtrans_Clickstream_Meta_TransactionDetail {
    get {return _storage._transaction ?? Midtrans_Clickstream_Meta_TransactionDetail()}
    set {_uniqueStorage()._transaction = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  required public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Midtrans_Clickstream_Meta_EventMeta: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "midtrans.clickstream.meta"

extension Midtrans_Clickstream_Meta_EventMeta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EventMeta"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_guid"),
    2: .same(proto: "merchant"),
    3: .same(proto: "app"),
    4: .same(proto: "device"),
    5: .standard(proto: "snap_token"),
    6: .standard(proto: "order_id"),
    7: .standard(proto: "session_id"),
    8: .same(proto: "transaction"),
  ]

  public class _StorageClass {
    var _eventGuid: String = String()
    var _merchant: Midtrans_Clickstream_Meta_Merchant? = nil
    var _app: Midtrans_Clickstream_Meta_App? = nil
    var _device: Midtrans_Clickstream_Meta_Device? = nil
    var _snapToken: String = String()
    var _orderID: String = String()
    var _sessionID: String = String()
    var _transaction: Midtrans_Clickstream_Meta_TransactionDetail? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventGuid = source._eventGuid
      _merchant = source._merchant
      _app = source._app
      _device = source._device
      _snapToken = source._snapToken
      _orderID = source._orderID
      _sessionID = source._sessionID
      _transaction = source._transaction
    }
  }

  fileprivate func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._eventGuid) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._merchant) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._app) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._device) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._snapToken) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._orderID) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._sessionID) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._transaction) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._eventGuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventGuid, fieldNumber: 1)
      }
      try { if let v = _storage._merchant {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._app {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._snapToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._snapToken, fieldNumber: 5)
      }
      if !_storage._orderID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderID, fieldNumber: 6)
      }
      if !_storage._sessionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sessionID, fieldNumber: 7)
      }
      try { if let v = _storage._transaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public extension Midtrans_Clickstream_Meta_EventMeta {
         
    init(properties: inout [String:Any],
         eventName: String,
         product:Midtrans_Clickstream_Products_Common_Product? = .generic) {

         self.init(properties: &properties,
                  eventName: eventName,
                  product: product, propertyPath: "")
    }
         
    internal init(properties: inout [String:Any],
         eventName: String,
         product:Midtrans_Clickstream_Products_Common_Product? = .generic, propertyPath: String = "") {

          
        let mappedPropertyPath = "\(propertyPath.isEmpty ? "" : "\(propertyPath).")"
        
 self.merchant = Midtrans_Clickstream_Meta_Merchant(properties: &properties, eventName: eventName, propertyPath: "\(mappedPropertyPath)merchant") 
 self.app = Midtrans_Clickstream_Meta_App(properties: &properties, eventName: eventName, propertyPath: "\(mappedPropertyPath)app") 
 self.device = Midtrans_Clickstream_Meta_Device(properties: &properties, eventName: eventName, propertyPath: "\(mappedPropertyPath)device") 
 self.transaction = Midtrans_Clickstream_Meta_TransactionDetail(properties: &properties, eventName: eventName, propertyPath: "\(mappedPropertyPath)transaction") 
    }
}