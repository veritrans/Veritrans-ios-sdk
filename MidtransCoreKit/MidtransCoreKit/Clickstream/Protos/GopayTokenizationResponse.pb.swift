// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: midtrans/clickstream/products/common/GopayTokenizationResponse.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///platform="ios,android"

import Foundation
import SwiftProtobuf

public class Midtrans_Clickstream_Products_Common_GopayTokenizationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountStatus: String = String()

  public var balance: String = String()

  public var phoneNumber: String = String()

  public var gopayErrorCode: String = String()

  public var gopayErrorDescription: String = String()

  public var tokenizationLinkingCallback: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  required public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Midtrans_Clickstream_Products_Common_GopayTokenizationResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "midtrans.clickstream.products.common"

extension Midtrans_Clickstream_Products_Common_GopayTokenizationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GopayTokenizationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_status"),
    2: .same(proto: "balance"),
    3: .standard(proto: "phone_number"),
    6: .standard(proto: "gopay_error_code"),
    7: .standard(proto: "gopay_error_description"),
    8: .standard(proto: "tokenization_linking_callback"),
  ]

  public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.accountStatus) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.balance) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.gopayErrorCode) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.gopayErrorDescription) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.tokenizationLinkingCallback) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.accountStatus, fieldNumber: 1)
    }
    if !self.balance.isEmpty {
      try visitor.visitSingularStringField(value: self.balance, fieldNumber: 2)
    }
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 3)
    }
    if !self.gopayErrorCode.isEmpty {
      try visitor.visitSingularStringField(value: self.gopayErrorCode, fieldNumber: 6)
    }
    if !self.gopayErrorDescription.isEmpty {
      try visitor.visitSingularStringField(value: self.gopayErrorDescription, fieldNumber: 7)
    }
    if !self.tokenizationLinkingCallback.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenizationLinkingCallback, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public extension Midtrans_Clickstream_Products_Common_GopayTokenizationResponse {
         
    @objc public convenience init(properties: [String:Any],
         eventName: String) {

         self.init()
         
    }
}
