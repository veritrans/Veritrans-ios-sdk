// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: midtrans/clickstream/products/events/ui/Page.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///platform="ios,android"

import Foundation
import SwiftProtobuf

///CorrespondsTo: "testing event name 1", "testing event name 2"
public class Midtrans_Clickstream_Products_Events_Ui_Page {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var meta: Midtrans_Clickstream_Meta_EventMeta {
    get {return _storage._meta ?? Midtrans_Clickstream_Meta_EventMeta()}
    set {_uniqueStorage()._meta = newValue}
  }

  public var eventName: String {
    get {return _storage._eventName}
    set {_uniqueStorage()._eventName = newValue}
  }

  public var product: Midtrans_Clickstream_Products_Common_Product {
    get {return _storage._product}
    set {_uniqueStorage()._product = newValue}
  }

  public var eventTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._eventTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._eventTimestamp = newValue}
  }

  public var deviceTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._deviceTimestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._deviceTimestamp = newValue}
  }

  public var pageDetail: Midtrans_Clickstream_Products_Common_PageDetail {
    get {return _storage._pageDetail ?? Midtrans_Clickstream_Products_Common_PageDetail()}
    set {_uniqueStorage()._pageDetail = newValue}
  }

  public var action: Midtrans_Clickstream_Products_Common_Action {
    get {return _storage._action ?? Midtrans_Clickstream_Products_Common_Action()}
    set {_uniqueStorage()._action = newValue}
  }

  public var gopayTokenization: Midtrans_Clickstream_Products_Common_GopayTokenization {
    get {return _storage._gopayTokenization ?? Midtrans_Clickstream_Products_Common_GopayTokenization()}
    set {_uniqueStorage()._gopayTokenization = newValue}
  }

  public var payment: Midtrans_Clickstream_Products_Common_Payment {
    get {return _storage._payment ?? Midtrans_Clickstream_Products_Common_Payment()}
    set {_uniqueStorage()._payment = newValue}
  }

  public var eventType: String {
    get {return _storage._eventType}
    set {_uniqueStorage()._eventType = newValue}
  }

  public var exchange: Midtrans_Clickstream_Products_Common_Exchange {
    get {return _storage._exchange ?? Midtrans_Clickstream_Products_Common_Exchange()}
    set {_uniqueStorage()._exchange = newValue}
  }

  public var properties: Dictionary<String,String> {
    get {return _storage._properties}
    set {_uniqueStorage()._properties = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  required public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Midtrans_Clickstream_Products_Events_Ui_Page: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "midtrans.clickstream.products.events.ui"

extension Midtrans_Clickstream_Products_Events_Ui_Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Page"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    100: .same(proto: "meta"),
    101: .standard(proto: "event_name"),
    102: .same(proto: "product"),
    103: .standard(proto: "event_timestamp"),
    104: .standard(proto: "device_timestamp"),
    1: .standard(proto: "page_detail"),
    2: .same(proto: "action"),
    3: .standard(proto: "gopay_tokenization"),
    4: .same(proto: "payment"),
    5: .standard(proto: "event_type"),
    6: .same(proto: "exchange"),
    7: .same(proto: "properties"),
  ]

  public class _StorageClass {
    var _meta: Midtrans_Clickstream_Meta_EventMeta? = nil
    var _eventName: String = String()
    var _product: Midtrans_Clickstream_Products_Common_Product = .unspecified
    var _eventTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _deviceTimestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _pageDetail: Midtrans_Clickstream_Products_Common_PageDetail? = nil
    var _action: Midtrans_Clickstream_Products_Common_Action? = nil
    var _gopayTokenization: Midtrans_Clickstream_Products_Common_GopayTokenization? = nil
    var _payment: Midtrans_Clickstream_Products_Common_Payment? = nil
    var _eventType: String = String()
    var _exchange: Midtrans_Clickstream_Products_Common_Exchange? = nil
    var _properties: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _meta = source._meta
      _eventName = source._eventName
      _product = source._product
      _eventTimestamp = source._eventTimestamp
      _deviceTimestamp = source._deviceTimestamp
      _pageDetail = source._pageDetail
      _action = source._action
      _gopayTokenization = source._gopayTokenization
      _payment = source._payment
      _eventType = source._eventType
      _exchange = source._exchange
      _properties = source._properties
    }
  }

  fileprivate func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._pageDetail) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._action) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._gopayTokenization) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._payment) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._eventType) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._exchange) }()
        case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._properties) }()
        case 100: try { try decoder.decodeSingularMessageField(value: &_storage._meta) }()
        case 101: try { try decoder.decodeSingularStringField(value: &_storage._eventName) }()
        case 102: try { try decoder.decodeSingularEnumField(value: &_storage._product) }()
        case 103: try { try decoder.decodeSingularMessageField(value: &_storage._eventTimestamp) }()
        case 104: try { try decoder.decodeSingularMessageField(value: &_storage._deviceTimestamp) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._pageDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._action {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._gopayTokenization {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._payment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._eventType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventType, fieldNumber: 5)
      }
      try { if let v = _storage._exchange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._properties.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._properties, fieldNumber: 7)
      }
      try { if let v = _storage._meta {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      } }()
      if !_storage._eventName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventName, fieldNumber: 101)
      }
      if _storage._product != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._product, fieldNumber: 102)
      }
      try { if let v = _storage._eventTimestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      } }()
      try { if let v = _storage._deviceTimestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}
// Adding protocol conformance to ProductCommons protocol
extension Midtrans_Clickstream_Products_Events_Ui_Page: ProductCommons { }

public extension Midtrans_Clickstream_Products_Events_Ui_Page {
         
    init(properties: inout [String:Any],
         eventName: String,
         product:Midtrans_Clickstream_Products_Common_Product? = .generic) {

         self.init(properties: &properties,
                  eventName: eventName,
                  product: product, propertyPath: "")
    }
         
    internal init(properties: inout [String:Any],
         eventName: String,
         product:Midtrans_Clickstream_Products_Common_Product? = .generic,  propertyPath: String = "") {


        // Mapping product type from ServiceType property
        if let type: String = properties["ServiceType"] as? String {
            self.product = Midtrans_Clickstream_Products_Common_Product(properties: &properties, eventName: type.lowercased())
        } else if let type: String = properties["servicetype"] as? String {
            self.product = Midtrans_Clickstream_Products_Common_Product(properties: &properties, eventName: type.lowercased())
        } else if let type: String = properties["Servicetype"] as? String {
            self.product = Midtrans_Clickstream_Products_Common_Product(properties: &properties, eventName: type.lowercased())
        } else if let type: String = properties["serviceType"] as? String {
            self.product = Midtrans_Clickstream_Products_Common_Product(properties: &properties, eventName: type.lowercased())
        } else if let type: String = properties["Service Type"] as? String {
            self.product = Midtrans_Clickstream_Products_Common_Product(properties: &properties, eventName: type.lowercased())
        }  else if let type: String = properties["service type"] as? String {
            self.product = Midtrans_Clickstream_Products_Common_Product(properties: &properties, eventName: type.lowercased())
        } else if let type: String = properties["Service type"] as? String {
            self.product = Midtrans_Clickstream_Products_Common_Product(properties: &properties, eventName: type.lowercased())
        } else if let type: String = properties["service Type"] as? String {
            self.product = Midtrans_Clickstream_Products_Common_Product(properties: &properties, eventName: type.lowercased())
        } else {
            self.product = Midtrans_Clickstream_Products_Common_Product(properties: &properties, eventName: eventName.lowercased())
        }
         
        self.eventName = eventName 
        let mappedPropertyPath = "\(propertyPath.isEmpty ? "" : "\(propertyPath).")"
        
 self.pageDetail = Midtrans_Clickstream_Products_Common_PageDetail(properties: &properties, eventName: eventName, propertyPath: "\(mappedPropertyPath)page_detail") 
 self.action = Midtrans_Clickstream_Products_Common_Action(properties: &properties, eventName: eventName, propertyPath: "\(mappedPropertyPath)action") 
 self.gopayTokenization = Midtrans_Clickstream_Products_Common_GopayTokenization(properties: &properties, eventName: eventName, propertyPath: "\(mappedPropertyPath)gopay_tokenization") 
 self.payment = Midtrans_Clickstream_Products_Common_Payment(properties: &properties, eventName: eventName, propertyPath: "\(mappedPropertyPath)payment") 
 self.exchange = Midtrans_Clickstream_Products_Common_Exchange(properties: &properties, eventName: eventName, propertyPath: "\(mappedPropertyPath)exchange") 
    }
}