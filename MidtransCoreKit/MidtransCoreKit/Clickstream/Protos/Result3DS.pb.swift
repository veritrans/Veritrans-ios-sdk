// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: midtrans/clickstream/products/common/Result3DS.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///platform="ios,android"

import Foundation

public class Midtrans_Clickstream_Products_Common_Result3DS {
  //  Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bank: String = String()

  public var eci: String = String()

  public var statusCode: String = String()

  public var cardType: String = String()

  public var channelResponseCode: String = String()

  public var channelResponseMessage: String = String()

  public var transactionStatus: String = String()

  public var unknownFields =  UnknownStorage()

  required public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Midtrans_Clickstream_Products_Common_Result3DS: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "midtrans.clickstream.products.common"

extension Midtrans_Clickstream_Products_Common_Result3DS:  Message,  _MessageImplementationBase,  _ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Result3DS"
  public static let _protobuf_nameMap:  _NameMap = [
    1: .same(proto: "bank"),
    2: .same(proto: "eci"),
    3: .standard(proto: "status_code"),
    4: .standard(proto: "card_type"),
    5: .standard(proto: "channel_response_code"),
    6: .standard(proto: "channel_response_message"),
    7: .standard(proto: "transaction_status"),
  ]

  public func decodeMessage<D:  Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.bank) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.eci) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.statusCode) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.cardType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.channelResponseCode) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.channelResponseMessage) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.transactionStatus) }()
      default: break
      }
    }
  }

  public func traverse<V:  Visitor>(visitor: inout V) throws {
    if !self.bank.isEmpty {
      try visitor.visitSingularStringField(value: self.bank, fieldNumber: 1)
    }
    if !self.eci.isEmpty {
      try visitor.visitSingularStringField(value: self.eci, fieldNumber: 2)
    }
    if !self.statusCode.isEmpty {
      try visitor.visitSingularStringField(value: self.statusCode, fieldNumber: 3)
    }
    if !self.cardType.isEmpty {
      try visitor.visitSingularStringField(value: self.cardType, fieldNumber: 4)
    }
    if !self.channelResponseCode.isEmpty {
      try visitor.visitSingularStringField(value: self.channelResponseCode, fieldNumber: 5)
    }
    if !self.channelResponseMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.channelResponseMessage, fieldNumber: 6)
    }
    if !self.transactionStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionStatus, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public extension Midtrans_Clickstream_Products_Common_Result3DS {
         
    @objc public convenience init(properties: [String:Any],
         eventName: String) {

         self.init()
         
    }
}
