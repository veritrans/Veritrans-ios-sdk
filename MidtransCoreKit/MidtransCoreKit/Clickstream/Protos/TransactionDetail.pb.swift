// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: midtrans/clickstream/meta/TransactionDetail.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///platform="ios,android"

import Foundation

public class Midtrans_Clickstream_Meta_TransactionDetail {
  //  Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var distinctID: String = String()

  public var grossAmount: String = String()

  public var orderID: String = String()

  public var currency: String = String()

  public var paymentsEnabled: String = String()

  public var paymentsEnabledList: String = String()

  public var paymentsEnabledLength: String = String()

  public var promoEnabled: Bool = false

  public var creditCard: Midtrans_Clickstream_Meta_CreditCard {
    get {return _creditCard ?? Midtrans_Clickstream_Meta_CreditCard()}
    set {_creditCard = newValue}
  }

  public var unknownFields =  UnknownStorage()

  required public init() {}

  fileprivate var _creditCard: Midtrans_Clickstream_Meta_CreditCard? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Midtrans_Clickstream_Meta_TransactionDetail: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "midtrans.clickstream.meta"

extension Midtrans_Clickstream_Meta_TransactionDetail:  Message,  _MessageImplementationBase,  _ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionDetail"
  public static let _protobuf_nameMap:  _NameMap = [
    1: .standard(proto: "distinct_id"),
    2: .standard(proto: "gross_amount"),
    3: .standard(proto: "order_id"),
    4: .same(proto: "currency"),
    5: .standard(proto: "payments_enabled"),
    6: .standard(proto: "payments_enabled_list"),
    7: .standard(proto: "payments_enabled_length"),
    8: .standard(proto: "promo_enabled"),
    9: .standard(proto: "credit_card"),
  ]

  public func decodeMessage<D:  Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.distinctID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.grossAmount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.orderID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.paymentsEnabled) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.paymentsEnabledList) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.paymentsEnabledLength) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.promoEnabled) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._creditCard) }()
      default: break
      }
    }
  }

  public func traverse<V:  Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.distinctID.isEmpty {
      try visitor.visitSingularStringField(value: self.distinctID, fieldNumber: 1)
    }
    if !self.grossAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.grossAmount, fieldNumber: 2)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 3)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 4)
    }
    if !self.paymentsEnabled.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentsEnabled, fieldNumber: 5)
    }
    if !self.paymentsEnabledList.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentsEnabledList, fieldNumber: 6)
    }
    if !self.paymentsEnabledLength.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentsEnabledLength, fieldNumber: 7)
    }
    if self.promoEnabled != false {
      try visitor.visitSingularBoolField(value: self.promoEnabled, fieldNumber: 8)
    }
    try { if let v = self._creditCard {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }
}

public extension Midtrans_Clickstream_Meta_TransactionDetail {
         
    @objc public convenience init(properties: [String:Any],
         eventName: String) {

         self.init()
         
 self.creditCard = Midtrans_Clickstream_Meta_CreditCard(properties: properties, eventName: eventName) 
    }
}
